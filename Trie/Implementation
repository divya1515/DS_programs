class node{
    private:
    node *links[26];
    bool flag=false;
    public:
    node()
    {
        flag=false;
        for(int i=0;i<26;i++)
        links[i]=NULL;
    }
    bool containsKey(char ch)
    {
        return (links[ch-'a']!=NULL);
    }
    void put(char ch)
    {
        links[ch-'a']=new node();
    }
    node* get(char ch)
    {
        return links[ch-'a'];
    }
    void setEnd()
    {
        flag=true;
    }
    bool getEnd()
    {
        return flag;
    }
};
class Trie {
private:
    node *root;
public:
    Trie() {
        root=new node();
    }
    
    void insert(string word) {
        node *curr=root;
        for(int i=0;i<word.length();i++)
        {
            if(!curr->containsKey(word[i]))
            {
                curr->put(word[i]);
                
            }
            curr=curr->get(word[i]);
        }
        
        curr->setEnd();
        if(word=="app")
        cout<<curr->getEnd();
    }
    
    bool search(string word) {
        node *curr=root;
        for(int i=0;i<word.length();i++)
        {
           if(!curr->containsKey(word[i]))
           return false;
           curr=curr->get(word[i]);
        }
        return (curr->getEnd()==true);
    }
    
    bool startsWith(string prefix) {
        node *curr=root;
        for(int i=0;i<prefix.length();i++)
        {
           if(!curr->containsKey(prefix[i]))
           return false;
           curr=curr->get(prefix[i]);
        }
        return true;
    }
    
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
