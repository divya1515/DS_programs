 void dfs_visit(int y,vector<pair<int,int>>adjlist[],vector<int>&visited,stack<int>&st)
     {
         visited[y]=1;
         for(auto p:adjlist[y])
         {
             if(visited[p.first]==0)
             {
                 dfs_visit(p.first,adjlist,visited,st);
             }
         }
         st.push(y);
     }
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
        vector<pair<int,int>>adjlist[N];
        for(int i=0;i<edges.size();i++)
        {
            adjlist[edges[i][0]].push_back({edges[i][1],edges[i][2]});
        }
        stack<int>st;
        vector<int>visited(N,0);
        dfs_visit(0,adjlist,visited,st);
        vector<int>dis(N,INT_MAX);
        dis[0]=0;
        while(!st.empty())
        {
            int p=st.top();
            st.pop();
            for(auto s:adjlist[p])
            {
                dis[s.first]=min(dis[s.first],dis[p]+s.second);
            }
        }
        for(int i=0;i<N;i++)
        {
            if(dis[i]==INT_MAX)
            dis[i]=-1;
        }
        return dis;
        
    }
};
